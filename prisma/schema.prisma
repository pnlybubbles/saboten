generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["deno"]
  output          = "../netlify/edge-functions/_shared/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id        String         @id @default(uuid()) @db.Uuid
  createdAt DateTime       @default(now()) @db.Timestamptz(3)
  roomId    String         @db.Uuid
  label     String         @default("")
  room      Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  payments  EventPayment[]
  members   EventMember[]
}

model EventMember {
  createdAt DateTime   @default(now()) @db.Timestamptz(3)
  eventId   String     @db.Uuid
  event     Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  memberId  String     @db.Uuid
  member    RoomMember @relation(fields: [memberId], references: [id], onDelete: Cascade)

  @@id([eventId, memberId])
}

model EventPayment {
  createdAt      DateTime    @default(now()) @db.Timestamptz(3)
  amount         BigInt
  currency       String
  paidByMemberId String      @db.Uuid
  eventId        String      @db.Uuid
  paiedByMember  RoomMember? @relation(fields: [paidByMemberId], references: [id], onDelete: SetNull)
  event          Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([eventId, paidByMemberId])
}

model Room {
  id           String             @id @default(uuid()) @db.Uuid
  createdAt    DateTime           @default(now()) @db.Timestamptz(3)
  title        String             @default("")
  events       Event[]
  members      RoomMember[]
  currencyRate RoomCurrencyRate[]
}

model RoomCurrencyRate {
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  roomId     String   @db.Uuid
  room       Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  toCurrency String
  currency   String
  rate       Float

  @@id([roomId, toCurrency, currency])
}

model RoomMember {
  id          String         @id @default(uuid()) @db.Uuid
  createdAt   DateTime       @default(now()) @db.Timestamptz(3)
  roomId      String         @db.Uuid
  name        String         @default("")
  userId      String?        @db.Uuid
  payments    EventPayment[]
  room        Room           @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user        User?          @relation(fields: [userId], references: [id], onDelete: SetNull)
  EventMember EventMember[]
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  secret      String       @unique @default(uuid()) @db.Uuid
  createdAt   DateTime     @default(now()) @db.Timestamptz(3)
  name        String       @default("")
  roomMembers RoomMember[]
}
